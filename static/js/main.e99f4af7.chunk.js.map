{"version":3,"sources":["Bridges.js","App.js","index.js"],"names":["Bridges","useState","undefined","edge1","setEdge1","edge2","setEdge2","bridge","setBridge","error","setError","className","onClick","onChange","e","target","value","Error","bridges","find","b","err","message","name","rel","href","url","comment","App","chains","setChains","selectedChain","setSelectedChain","currentNetwork","setCurrentNetwork","showChainData","setShowChainData","addChain","a","chainId","chainName","rpcUrls","rpc","nativeCurrency","infoURL","method","includes","window","ethereum","request","params","toString","blockExplorerUrls","console","useEffect","fetch","response","json","sort","localeCompare","getChains","length","autoRefreshOnNetworkChange","on","location","reload","networkId","current","findIndex","parseInt","getWallet","repo","side","colorBackground","colorOctocat","src","alt","map","i","shortName","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e99f4af7.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport bridges from './bridges.json';\r\n\r\nconst Bridges = () => {\r\n  const [edge1, setEdge1] = useState(undefined);\r\n  const [edge2, setEdge2] = useState(undefined);\r\n  const [bridge, setBridge] = useState(undefined);\r\n  const [error, setError] = useState(undefined);\r\n  \r\n  const findBridge = () => {\r\n    try {\r\n      setError(undefined);\r\n      if(!edge1) throw new Error('Plaese select \"from\" chain');\r\n      if(!edge2) throw new Error('Plaese select \"to\" chain');\r\n      if(edge1 === edge2) throw new Error('Plaese select 2 different chains');\r\n      const bridge = bridges.find(b => (b.edge1 === edge1 && b.edge2 === edge2) || (b.edge1 === edge2 && b.edge2 === edge1));\r\n      setBridge(bridge);\r\n      if(!bridge) {\r\n        throw new Error(`Couldn't find bridge between ${edge1} and ${edge2} - try a different route`);\r\n      }\r\n    }\r\n    catch(err) {\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Find a bridge between chains</h2>\r\n      {error &&\r\n          <div>\r\n            <div className=\"segment error\">{error}</div>\r\n            <button\r\n              className=\"button errorButton\"\r\n              onClick={() => setError(undefined)}>\r\n                Clear error and try again\r\n            </button>\r\n          </div>\r\n        }\r\n      From:&nbsp;\r\n      <select onChange={e => setEdge1(e.target.value)}>\r\n        <option value=\"\">Select \"From\" chain</option>\r\n        <option value=\"Ethereum\">Ethereum</option>\r\n        <option value=\"xDai\">xDai</option>\r\n        <option value=\"Binance Smart Chain\">Binance Smart Chain</option>\r\n        <option value=\"Matic\">Matic</option>\r\n      </select>\r\n      &nbsp;&nbsp;To:&nbsp;\r\n      <select onChange={e => setEdge2(e.target.value)}>\r\n        <option value=\"\">Select \"To\" chain</option>\r\n        <option value=\"Ethereum\">Ethereum</option>\r\n        <option value=\"xDai\">xDai</option>\r\n        <option value=\"Binance Smart Chain\">Binance Smart Chain</option>\r\n        <option value=\"Matic\">Matic</option>\r\n      </select>\r\n      &nbsp;&nbsp;\r\n      <button \r\n        className=\"button chainButton\"\r\n        onClick={findBridge}>\r\n          Find bridge\r\n      </button>\r\n      {bridge &&\r\n        <div className=\"chainData\">\r\n          Use the <b>{bridge.name}</b> at <a target=\"_blank\" rel=\"noreferrer\" href={bridge.url}>{bridge.url}</a>\r\n          {bridge.comment && <><br/><b>Comment:</b> {bridge.comment}</>}\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Bridges;\r\n","import React, {useEffect, useState} from 'react';\r\nimport ForkMeOnGithub from 'fork-me-on-github';\r\nimport Bridges from './Bridges';\r\nimport './App.css';\r\n\r\nconst chainsUrl = 'https://chainid.network/chains.json';\r\n\r\nconst App = () => {\r\n  const [chains, setChains] = useState([]);\r\n  const [selectedChain, setSelectedChain] = useState(undefined);\r\n  const [error, setError] = useState(undefined);\r\n  const [currentNetwork, setCurrentNetwork] = useState(undefined);\r\n  const [showChainData, setShowChainData] = useState(false);\r\n\r\n  const addChain = async () => {\r\n    const {chainId, name: chainName, rpc: rpcUrls, nativeCurrency, infoURL} = chains[selectedChain];\r\n    const method = [1, 3, 4, 42, 420].includes(chainId) ? 'wallet_updateEthereumChain' : 'wallet_addEthereumChain';\r\n    //const method = 'wallet_addEthereumChain';\r\n    try {\r\n      await window.ethereum.request({\r\n        method,\r\n        params: [{\r\n          chainId: `0x${chainId.toString(16)}`,\r\n          chainName,\r\n          nativeCurrency,\r\n          rpcUrls,\r\n          blockExplorerUrls: [infoURL]\r\n        }]\r\n      });\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getChains = async () => {\r\n      try {\r\n        const response = await fetch(chainsUrl);\r\n        const chains = await response.json();\r\n        chains.sort((a, b) => a.name.localeCompare(b.name));\r\n        setChains(chains);\r\n      }\r\n      catch(err) {\r\n        console.error(err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getChains();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getWallet = async () => {\r\n      if(!chains.length) {\r\n        return;\r\n      }\r\n      try {\r\n        const {ethereum} = window;\r\n        if(!ethereum) {\r\n          throw new Error('Please install a Web3 wallet (like Metamask)');\r\n        }\r\n        ethereum.autoRefreshOnNetworkChange = false;\r\n        ethereum\r\n          .on('accountsChanged', () => {window.location.reload();})\r\n          .on('chainChanged', () => {window.location.reload();});\r\n        const networkId = await ethereum.request({method: 'net_version'});\r\n        const current = chains.findIndex(({chainId}) => chainId === parseInt(networkId, 10));\r\n        setCurrentNetwork(current);\r\n      }\r\n      catch(err) {\r\n        console.error(err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getWallet();\r\n  }, [chains]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ForkMeOnGithub\r\n        repo=\"https://github.com/TravelingTechGuy/add-chain\"\r\n        side=\"right\"\r\n        colorBackground=\"#7b38d8\"\r\n        colorOctocat=\"white\"\r\n      />\r\n      <header>\r\n        <img src=\"https://travelingtechguy.github.io/add-chain/favicon/favicon-32x32.png\" alt=\"icon\" className=\"logo\" />\r\n        <h1>MetaMask Chains</h1>\r\n      </header>\r\n      <main>\r\n        <h2>Add a new chain to your MetaMask</h2>\r\n        {error &&\r\n          <div>\r\n            <div className=\"segment error\">{error}</div>\r\n            <button\r\n              className=\"button errorButton\"\r\n              onClick={() => setError(undefined)}>\r\n                Clear error and try again\r\n            </button>\r\n          </div>\r\n        }\r\n        <div className=\"segment network\">\r\n          Current network: {currentNetwork !== undefined ? chains[currentNetwork].name : 'Development'}\r\n        </div>\r\n        <div>\r\n          {\r\n            chains.length &&\r\n            <select onChange={e => setSelectedChain(e.target.value)}>\r\n              {\r\n                chains.map(({name, shortName}, i) => <option value={i} key={shortName}>{name}</option>)\r\n              }\r\n            </select>\r\n          }\r\n          {selectedChain &&\r\n            <>\r\n              <button\r\n                className=\"button addButton\"\r\n                onClick={addChain}>\r\n                  Add selected chain\r\n              </button>\r\n              <button \r\n                className=\"button chainButton\"\r\n                onClick={() => setShowChainData(!showChainData)}>\r\n                  {showChainData ? 'Hide': 'Show'} Chain data\r\n              </button>\r\n              {showChainData &&\r\n                <div className=\"chainData\">\r\n                  <code>\r\n                    <pre>{JSON.stringify(chains[selectedChain], null, 2)}</pre>\r\n                  </code>\r\n                </div>\r\n              }\r\n            </>\r\n          }\r\n        </div>\r\n        <hr/>\r\n        <Bridges />\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}