{"version":3,"sources":["App.js","index.js"],"names":["App","useState","chains","setChains","undefined","selectedChain","setSelectedChain","error","setError","currentNetwork","setCurrentNetwork","showChainData","setShowChainData","addChain","a","chainId","chainName","name","rpcUrls","rpc","nativeCurrency","infoURL","window","ethereum","request","method","params","toString","blockExplorerUrls","console","message","useEffect","fetch","response","json","sort","b","localeCompare","getChains","length","Error","autoRefreshOnNetworkChange","on","location","reload","networkId","current","findIndex","parseInt","getWallet","className","repo","side","colorBackground","colorOctocat","src","alt","onClick","onChange","e","target","value","map","i","shortName","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAyIeA,EAnIH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAE0BF,wBAASG,GAFnC,mBAETC,EAFS,KAEMC,EAFN,OAGUL,wBAASG,GAHnB,mBAGTG,EAHS,KAGFC,EAHE,OAI4BP,wBAASG,GAJrC,mBAITK,EAJS,KAIOC,EAJP,OAK0BT,oBAAS,GALnC,mBAKTU,EALS,KAKMC,EALN,KAOVC,EAAQ,uCAAG,sCAAAC,EAAA,+DAC2DZ,EAAOG,GAA1EU,EADQ,EACRA,QAAeC,EADP,EACCC,KAAsBC,EADvB,EACkBC,IAAcC,EADhC,EACgCA,eAAgBC,EADhD,EACgDA,QADhD,kBAGPC,OAAOC,SAASC,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CAAC,CACPX,QAAQ,KAAD,OAAOA,EAAQY,SAAS,KAC/BX,YACAI,iBACAF,UACAU,kBAAmB,CAACP,OAVX,uDAebQ,QAAQtB,MAAR,MACAC,EAAS,KAAIsB,SAhBA,yDAAH,qDA8Dd,OA1CAC,qBAAU,YACO,uCAAG,8BAAAjB,EAAA,+EAESkB,MAhCb,uCA8BI,cAERC,EAFQ,gBAGOA,EAASC,OAHhB,QAGRhC,EAHQ,QAIPiC,MAAK,SAACrB,EAAGsB,GAAJ,OAAUtB,EAAEG,KAAKoB,cAAcD,EAAEnB,SAC7Cd,EAAUD,GALI,kDAQd2B,QAAQtB,MAAR,MACAC,EAAS,KAAIsB,SATC,0DAAH,qDAYfQ,KACC,IAEHP,qBAAU,YACO,uCAAG,kCAAAjB,EAAA,yDACZZ,EAAOqC,OADK,+DAKKjB,OAAZC,EALO,EAKPA,SALO,sBAON,IAAIiB,MAAM,gDAPJ,cASdjB,EAASkB,4BAA6B,EACtClB,EACGmB,GAAG,mBAAmB,WAAOpB,OAAOqB,SAASC,YAC7CF,GAAG,gBAAgB,WAAOpB,OAAOqB,SAASC,YAZ/B,UAaUrB,EAASC,QAAQ,CAACC,OAAQ,gBAbpC,QAaRoB,EAbQ,OAcRC,EAAU5C,EAAO6C,WAAU,qBAAEhC,UAAyBiC,SAASH,EAAW,OAChFnC,EAAkBoC,GAfJ,kDAkBdjB,QAAQtB,MAAR,MACAC,EAAS,KAAIsB,SAnBC,0DAAH,qDAsBfmB,KACC,CAAC/C,IAGF,sBAAKgD,UAAU,MAAf,UACE,cAAC,IAAD,CACEC,KAAK,gDACLC,KAAK,QACLC,gBAAgB,UAChBC,aAAa,UAEf,mCACE,qBAAKC,IAAI,yEAAyEC,IAAI,OAAON,UAAU,SACvG,0DAEF,iCACG3C,GACC,gCACE,qBAAK2C,UAAU,gBAAf,SAAgC3C,IAChC,wBACE2C,UAAU,qBACVO,QAAS,kBAAMjD,OAASJ,IAF1B,0CAOJ,sBAAK8C,UAAU,kBAAf,mCACuC9C,IAAnBK,EAA+BP,EAAOO,GAAgBQ,KAAO,iBAEjF,gCAEIf,EAAOqC,QACP,wBAAQmB,SAAU,SAAAC,GAAC,OAAIrD,EAAiBqD,EAAEC,OAAOC,QAAjD,SAEI3D,EAAO4D,KAAI,WAAoBC,GAApB,IAAE9C,EAAF,EAAEA,KAAM+C,EAAR,EAAQA,UAAR,OAA0B,wBAAQH,MAAOE,EAAf,SAAmC9C,GAAZ+C,QAIjE3D,GACC,qCACE,wBACE6C,UAAU,mBACVO,QAAS5C,EAFX,gCAKA,yBACEqC,UAAU,qBACVO,QAAS,kBAAM7C,GAAkBD,IAFnC,UAGKA,EAAgB,OAAQ,OAH7B,iBAKCA,GACC,qBAAKuC,UAAU,YAAf,SACE,+BACE,8BAAMe,KAAKC,UAAUhE,EAAOG,GAAgB,KAAM,sBCxHtE8D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.c49b03a5.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport ForkMeOnGithub from 'fork-me-on-github';\r\nimport './App.css';\r\n\r\nconst chainsUrl = 'https://chainid.network/chains.json';\r\n\r\nconst App = () => {\r\n  const [chains, setChains] = useState([]);\r\n  const [selectedChain, setSelectedChain] = useState(undefined);\r\n  const [error, setError] = useState(undefined);\r\n  const [currentNetwork, setCurrentNetwork] = useState(undefined);\r\n  const [showChainData, setShowChainData] = useState(false);\r\n\r\n  const addChain = async () => {\r\n    const {chainId, name: chainName, rpc: rpcUrls, nativeCurrency, infoURL} = chains[selectedChain];\r\n    try {\r\n      await window.ethereum.request({\r\n        method: 'wallet_addEthereumChain',\r\n        params: [{\r\n          chainId: `0x${chainId.toString(16)}`,\r\n          chainName,\r\n          nativeCurrency,\r\n          rpcUrls,\r\n          blockExplorerUrls: [infoURL]\r\n        }]\r\n      });\r\n    }\r\n    catch(err) {\r\n      console.error(err);\r\n      setError(err.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getChains = async () => {\r\n      try {\r\n        const response = await fetch(chainsUrl);\r\n        const chains = await response.json();\r\n        chains.sort((a, b) => a.name.localeCompare(b.name));\r\n        setChains(chains);\r\n      }\r\n      catch(err) {\r\n        console.error(err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getChains();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const getWallet = async () => {\r\n      if(!chains.length) {\r\n        return;\r\n      }\r\n      try {\r\n        const {ethereum} = window;\r\n        if(!ethereum) {\r\n          throw new Error('Please install a Web3 wallet (like Metamask)');\r\n        }\r\n        ethereum.autoRefreshOnNetworkChange = false;\r\n        ethereum\r\n          .on('accountsChanged', () => {window.location.reload();})\r\n          .on('chainChanged', () => {window.location.reload();});\r\n        const networkId = await ethereum.request({method: 'net_version'});\r\n        const current = chains.findIndex(({chainId}) => chainId === parseInt(networkId, 10));\r\n        setCurrentNetwork(current);\r\n      }\r\n      catch(err) {\r\n        console.error(err);\r\n        setError(err.message);\r\n      }\r\n    };\r\n    getWallet();\r\n  }, [chains]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ForkMeOnGithub\r\n        repo=\"https://github.com/TravelingTechGuy/add-chain\"\r\n        side=\"right\"\r\n        colorBackground=\"#7b38d8\"\r\n        colorOctocat=\"white\"\r\n      />\r\n      <header>\r\n        <img src=\"https://travelingtechguy.github.io/add-chain/favicon/favicon-32x32.png\" alt=\"icon\" className=\"logo\" />\r\n        <h1>Add Chain to MetaMask</h1>\r\n      </header>\r\n      <main>\r\n        {error &&\r\n          <div>\r\n            <div className=\"segment error\">{error}</div>\r\n            <button\r\n              className=\"button errorButton\"\r\n              onClick={() => setError(undefined)}>\r\n                Clear error and try again\r\n            </button>\r\n          </div>\r\n        }\r\n        <div className=\"segment network\">\r\n          Current network: {currentNetwork !== undefined ? chains[currentNetwork].name : 'Development'}\r\n        </div>\r\n        <div>\r\n          {\r\n            chains.length &&\r\n            <select onChange={e => setSelectedChain(e.target.value)}>\r\n              {\r\n                chains.map(({name, shortName}, i) => <option value={i} key={shortName}>{name}</option>)\r\n              }\r\n            </select>\r\n          }\r\n          {selectedChain &&\r\n            <>\r\n              <button\r\n                className=\"button addButton\"\r\n                onClick={addChain}>\r\n                  Add selected chain\r\n              </button>\r\n              <button \r\n                className=\"button chainButton\"\r\n                onClick={() => setShowChainData(!showChainData)}>\r\n                  {showChainData ? 'Hide': 'Show'} chain data\r\n              </button>\r\n              {showChainData &&\r\n                <div className=\"chainData\">\r\n                  <code>\r\n                    <pre>{JSON.stringify(chains[selectedChain], null, 2)}</pre>\r\n                  </code>\r\n                </div>\r\n              }\r\n            </>\r\n          }\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}