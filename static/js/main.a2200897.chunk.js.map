{"version":3,"sources":["App.js","index.js"],"names":["App","useState","chains","setChains","undefined","selectedChain","setSelectedChain","error","setError","currentNetwork","setCurrentNetwork","addChain","a","chainId","chainName","name","rpcUrls","rpc","nativeCurrency","infoURL","window","ethereum","request","method","params","toString","blockExplorerUrls","console","message","useEffect","fetch","response","json","sort","b","localeCompare","getChains","length","Error","autoRefreshOnNetworkChange","on","location","reload","networkId","current","findIndex","parseInt","getWallet","style","textAlign","background","color","onClick","onChange","e","target","value","map","i","shortName","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAqGeA,EAjGH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACTC,EADS,KACDC,EADC,OAE0BF,wBAASG,GAFnC,mBAETC,EAFS,KAEMC,EAFN,OAGUL,wBAASG,GAHnB,mBAGTG,EAHS,KAGFC,EAHE,OAI4BP,wBAASG,GAJrC,mBAITK,EAJS,KAIOC,EAJP,KAMVC,EAAQ,uCAAG,sCAAAC,EAAA,+DAC2DV,EAAOG,GAA1EQ,EADQ,EACRA,QAAeC,EADP,EACCC,KAAsBC,EADvB,EACkBC,IAAcC,EADhC,EACgCA,eAAgBC,EADhD,EACgDA,QADhD,kBAGPC,OAAOC,SAASC,QAAQ,CAC5BC,OAAQ,0BACRC,OAAQ,CAAC,CACPX,QAAQ,KAAD,OAAOA,EAAQY,SAAS,KAC/BX,YACAE,UACAE,iBACAQ,kBAAmB,CAACP,OAVX,uDAebQ,QAAQpB,MAAR,MACAC,EAAS,KAAIoB,SAhBA,yDAAH,qDA8Dd,OA1CAC,qBAAU,YACO,uCAAG,8BAAAjB,EAAA,+EAESkB,MA/Bb,uCA6BI,cAERC,EAFQ,gBAGOA,EAASC,OAHhB,QAGR9B,EAHQ,QAIP+B,MAAK,SAACrB,EAAGsB,GAAJ,OAAUtB,EAAEG,KAAKoB,cAAcD,EAAEnB,SAC7CZ,EAAUD,GALI,kDAQdyB,QAAQpB,MAAR,MACAC,EAAS,KAAIoB,SATC,0DAAH,qDAYfQ,KACC,IAEHP,qBAAU,YACO,uCAAG,kCAAAjB,EAAA,yDACZV,EAAOmC,OADK,+DAKKjB,OAAZC,EALO,EAKPA,SALO,sBAON,IAAIiB,MAAM,gDAPJ,cASdjB,EAASkB,4BAA6B,EACtClB,EACGmB,GAAG,mBAAmB,WAAOpB,OAAOqB,SAASC,YAC7CF,GAAG,gBAAgB,WAAOpB,OAAOqB,SAASC,YAZ/B,UAaUrB,EAASC,QAAQ,CAACC,OAAQ,gBAbpC,QAaRoB,EAbQ,OAcRC,EAAU1C,EAAO2C,WAAU,qBAAEhC,UAAyBiC,SAASH,EAAW,OAChFjC,EAAkBkC,GAfJ,kDAkBdjB,QAAQpB,MAAR,MACAC,EAAS,KAAIoB,SAnBC,0DAAH,qDAsBfmB,KACC,CAAC7C,IAGF,sBAAK8C,MAAO,CAACC,UAAW,UAAxB,UACE,iCACE,yDAEF,iCACG1C,GACC,gCACE,qBAAKyC,MAAO,CAACE,WAAY,MAAOC,MAAO,SAAvC,SAAkD5C,IAClD,wBAAQ6C,QAAS,kBAAM5C,OAASJ,IAAhC,4BAGJ,sBAAK4C,MAAO,CAACE,WAAY,OAAQC,MAAO,SAAxC,mCACuC/C,IAAnBK,EAA+BP,EAAOO,GAAgBM,KAAO,iBAG/Eb,EAAOmC,QACP,wBAAQgB,SAAU,SAAAC,GAAC,OAAIhD,EAAiBgD,EAAEC,OAAOC,QAAjD,SAEItD,EAAOuD,KAAI,WAAoBC,GAApB,IAAE3C,EAAF,EAAEA,KAAM4C,EAAR,EAAQA,UAAR,OAA0B,wBAAQH,MAAOE,EAAf,SAAmC3C,GAAZ4C,QAIjEtD,GAAiB,wBAAQ+C,QAASzC,EAAjB,uCC1F1BiD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a2200897.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\n\nconst chainsUrl = 'https://chainid.network/chains.json';\n\nconst App = () => {\n  const [chains, setChains] = useState([]);\n  const [selectedChain, setSelectedChain] = useState(undefined);\n  const [error, setError] = useState(undefined);\n  const [currentNetwork, setCurrentNetwork] = useState(undefined);\n\n  const addChain = async () => {\n    const {chainId, name: chainName, rpc: rpcUrls, nativeCurrency, infoURL} = chains[selectedChain];\n    try {\n      await window.ethereum.request({\n        method: 'wallet_addEthereumChain',\n        params: [{\n          chainId: `0x${chainId.toString(16)}`,\n          chainName,\n          rpcUrls,\n          nativeCurrency,\n          blockExplorerUrls: [infoURL]\n        }]\n      });\n    }\n    catch(err) {\n      console.error(err);\n      setError(err.message);\n    }\n  };\n\n  useEffect(() => {\n    const getChains = async () => {\n      try {\n        const response = await fetch(chainsUrl);\n        const chains = await response.json();\n        chains.sort((a, b) => a.name.localeCompare(b.name));\n        setChains(chains);\n      }\n      catch(err) {\n        console.error(err);\n        setError(err.message);\n      }\n    };\n    getChains();\n  }, []);\n\n  useEffect(() => {\n    const getWallet = async () => {\n      if(!chains.length) {\n        return;\n      }\n      try {\n        const {ethereum} = window;\n        if(!ethereum) {\n          throw new Error('Please install a Web3 wallet (like Metamask)');\n        }\n        ethereum.autoRefreshOnNetworkChange = false;\n        ethereum\n          .on('accountsChanged', () => {window.location.reload();})\n          .on('chainChanged', () => {window.location.reload();});\n        const networkId = await ethereum.request({method: 'net_version'});\n        const current = chains.findIndex(({chainId}) => chainId === parseInt(networkId, 10));\n        setCurrentNetwork(current);\n      }\n      catch(err) {\n        console.error(err);\n        setError(err.message);\n      }\n    };\n    getWallet();\n  }, [chains]);\n\n  return (\n    <div style={{textAlign: 'center'}}>\n      <header>\n        <h1>Add Chain to MetaMask</h1>\n      </header>\n      <main>\n        {error &&\n          <div>\n            <div style={{background: 'red', color: 'white'}}>{error}</div>\n            <button onClick={() => setError(undefined)}>Clear error</button>\n          </div>\n        }\n        <div style={{background: 'blue', color: 'white'}}>\n          Current network: {currentNetwork !== undefined ? chains[currentNetwork].name : 'Development'}\n        </div>\n        {\n          chains.length &&\n          <select onChange={e => setSelectedChain(e.target.value)}>\n            {\n              chains.map(({name, shortName}, i) => <option value={i} key={shortName}>{name}</option>)\n            }\n          </select>\n        }\n        {selectedChain && <button onClick={addChain}>Add selected chain</button>}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}